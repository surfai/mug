{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Taiphi Demo","text":""},{"location":"#workflow","title":"Workflow","text":"<pre><code>graph LR\n  A[Start] --&gt; B[QueryExtract];\n  B --&gt;|Edge 1| C[CallTaiphiModel];\n  C --&gt; |Edge 2|D[Generate Summary and Instructions];\n  D ----&gt;|Edge 3| E[Output to Copilot agent];</code></pre>"},{"location":"#langgraph-documentation","title":"LangGraph Documentation","text":"<p>For full documentation visit   LangGraph Documentation.</p>"},{"location":"calltaiphi/","title":"CallTaiphi","text":""},{"location":"calltaiphi/#calltaiphi","title":"CallTaiphi","text":"<code>taiphi.calltaiphi</code>"},{"location":"calltaiphi/#taiphi.calltaiphi.CallTaiphi","title":"<code>CallTaiphi(input_2)</code>","text":"<p>Appends \" to CallTaiphi\" to the input string.</p> <p>This function takes an input string and appends the phrase \" to CallTaiphi\" to it. It can be used to modify strings in a specific way, possibly for formatting or creating specific messages.</p> <p>Parameters:</p> Name Type Description Default <code>input_2</code> <code>str</code> <p>The input string to be modified.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The modified string with \" to CallTaiphi\" appended.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; CallTaiphi(\"Hello\")\n'Hello to CallTaiphi'\n&gt;&gt;&gt; CallTaiphi(\"Welcome\")\n'Welcome to CallTaiphi'\n</code></pre> Source code in <code>taiphi/calltaiphi.py</code> <pre><code>def CallTaiphi(input_2: str) -&gt; str:\n    \"\"\"\n    Appends \" to CallTaiphi\" to the input string.\n\n    This function takes an input string and appends the phrase \" to CallTaiphi\" to it.\n    It can be used to modify strings in a specific way, possibly for formatting or\n    creating specific messages.\n\n    Args:\n        input_2 (str): The input string to be modified.\n\n    Returns:\n        str: The modified string with \" to CallTaiphi\" appended.\n\n    Examples:\n        &gt;&gt;&gt; CallTaiphi(\"Hello\")\n        'Hello to CallTaiphi'\n        &gt;&gt;&gt; CallTaiphi(\"Welcome\")\n        'Welcome to CallTaiphi'\n    \"\"\"\n    return input_2 + \" to CallTaiphi\"\n</code></pre>"},{"location":"generateinstruct/","title":"GenerateInstruct","text":""},{"location":"generateinstruct/#generateinstruct","title":"GenerateInstruct","text":"<code>taiphi.generateinstruct</code>"},{"location":"generateinstruct/#taiphi.generateinstruct.GenerateInstruct","title":"<code>GenerateInstruct(input_2)</code>","text":"<p>Append \" to GenerateInstruct\" to the given input string.</p> <p>This function takes an input string and appends the phrase \" to GenerateInstruct\" to the end of it.</p> <p>Parameters:</p> Name Type Description Default <code>input_2</code> <code>str</code> <p>The input string to be modified.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>A new string consisting of the input string followed by \" to GenerateInstruct\".</p> Example <p>GenerateInstruct(\"Hello\") 'Hello to GenerateInstruct'</p> Source code in <code>taiphi/generateinstruct.py</code> <pre><code>def GenerateInstruct(input_2: str) -&gt; str:\n    \"\"\"\n    Append \" to GenerateInstruct\" to the given input string.\n\n    This function takes an input string and appends the phrase \" to GenerateInstruct\"\n    to the end of it.\n\n    Args:\n        input_2 (str): The input string to be modified.\n\n    Returns:\n        str: A new string consisting of the input string followed by \" to GenerateInstruct\".\n\n    Example:\n        &gt;&gt;&gt; GenerateInstruct(\"Hello\")\n        'Hello to GenerateInstruct'\n    \"\"\"\n    return input_2 + \" to GenerateInstruct\"\n</code></pre>"},{"location":"main/","title":"Main","text":""},{"location":"main/#main-app-to-execute","title":"Main app to execute","text":"<code>taiphi.main</code>"},{"location":"main/#taiphi.main.app","title":"<code>app = workflow.compile()</code>  <code>module-attribute</code>","text":"<p>Demonstrate the usage of the compiled Langchain graph.</p> <p>This section shows how to invoke the workflow with a sample input using the invoke() method. It processes the input through all nodes in the graph and returns the final output.</p>"},{"location":"main/#taiphi.main.workflow","title":"<code>workflow = Graph()</code>  <code>module-attribute</code>","text":"<p>Define and configure the Langchain graph workflow.</p> <p>This workflow consists of three nodes: - QueryExtractNode: Processes the initial user query - CallTaiphi: Interacts with the Taiphi system - GenerateInstruct: Generates final instructions or responses</p> <p>The workflow is set up as a linear sequence from QueryExtractNode to CallTaiphi to GenerateInstruct.</p>"},{"location":"queryextractnode/","title":"QueryExtractNode","text":""},{"location":"queryextractnode/#queryextractnode","title":"QueryExtractNode","text":"<code>taiphi.queryextractnode</code>"},{"location":"queryextractnode/#taiphi.queryextractnode.QueryExtractNode","title":"<code>QueryExtractNode(input_1)</code>","text":"<p>Appends a specific string to the input.</p> <p>This function takes an input string and appends \" to QueryExtractNode\" to it. It can be used to modify strings in a specific way, possibly for labeling or categorization purposes.</p> <p>Parameters:</p> Name Type Description Default <code>input_1</code> <code>str</code> <p>The original input string to be modified.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>A new string consisting of the input followed by \" to QueryExtractNode\".</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; QueryExtractNode(\"Hello\")\n'Hello to QueryExtractNode'\n&gt;&gt;&gt; QueryExtractNode(\"\")\n' to QueryExtractNode'\n</code></pre> Source code in <code>taiphi/queryextractnode.py</code> <pre><code>def QueryExtractNode(input_1: str) -&gt; str:\n    \"\"\"\n    Appends a specific string to the input.\n\n    This function takes an input string and appends \" to QueryExtractNode\" to it.\n    It can be used to modify strings in a specific way, possibly for labeling or\n    categorization purposes.\n\n    Args:\n        input_1 (str): The original input string to be modified.\n\n    Returns:\n        str: A new string consisting of the input followed by \" to QueryExtractNode\".\n\n    Examples:\n        &gt;&gt;&gt; QueryExtractNode(\"Hello\")\n        'Hello to QueryExtractNode'\n        &gt;&gt;&gt; QueryExtractNode(\"\")\n        ' to QueryExtractNode'\n    \"\"\"\n    return input_1 + \" to QueryExtractNode\"\n</code></pre>"}]}